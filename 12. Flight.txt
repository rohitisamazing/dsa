#include <iostream>
#include <vector>
#include <queue>
#include <string>
using namespace std;

// Function to check if the graph is connected
bool isConnected(const vector<vector<int>>& adjMatrix, int n) {
    vector<bool> visited(n, false);
    queue<int> q;

    // Start BFS from the first city (index 0)
    q.push(0);
    visited[0] = true;

    while (!q.empty()) {
        int current = q.front();
        q.pop();

        for (int i = 0; i < n; ++i) {
            if (adjMatrix[current][i] != 0 && !visited[i]) {
                visited[i] = true;
                q.push(i);
            }
        }
    }

    // Check if all cities are visited
    for (bool v : visited) {
        if (!v) return false;
    }
    return true;
}

int main() {
    int n; // Number of cities
    cout << "Enter the number of cities: ";
    cin >> n;

    vector<string> cityNames(n);
    cout << "Enter the names of the cities:\n";
    for (int i = 0; i < n; ++i) {
        cin >> cityNames[i];
    }

    vector<vector<int>> adjMatrix(n, vector<int>(n, 0)); // Adjacency matrix
    cout << "Enter the adjacency matrix (enter 0 if no direct flight exists):\n";
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> adjMatrix[i][j];
        }
    }

    cout << "\nFlight Path Representation (Adjacency Matrix):\n";
    cout << "    ";
    for (const auto& city : cityNames) {
        cout << city << " ";
    }
    cout << "\n";

    for (int i = 0; i < n; ++i) {
        cout << cityNames[i] << " ";
        for (int j = 0; j < n; ++j) {
            cout << adjMatrix[i][j] << " ";
        }
        cout << "\n";
    }

    if (isConnected(adjMatrix, n)) {
        cout << "\nThe graph is connected. All cities are reachable.\n";
    } else {
        cout << "\nThe graph is not connected. Some cities are not reachable.\n";
    }

    return 0;
}
